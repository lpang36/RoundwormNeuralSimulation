//package wormSimulation;

import java.util.Vector;

//excite/suppress system is still possible i think (equiv to -ve weights)
//use a sigmoid map for now

public class Synapse {
  private Neuron in; 
  private Neuron out;
  //private double risk;
  private Vector<Double> memory; 
  int inNum; 
  int outNum;
  //int time;
  //double linearWeight;
  //double mappedWeight;
  double weight; //why isn't this private
  private double ampPos = 1;
  private double ampNeg = 1;
  private double timeFactor = 1;
  private double scalingFactor = 0.01;
  double delay; //why isn't this private
  public Synapse (Neuron A, Neuron B, double x, double y) {
    //linearWeight = 1;
    //mappedWeight = mapSignal(linearWeight);
    //weight = Math.random(); //this is a little bit wtf
    if (Math.random()>x) {
      weight = 1;
    }
    else {
      weight = 0;
    }
    delay = Math.max(0,Math.random()*y);
    in = A;
    out = B;
    A.addOutputSynapse(this);
    B.addInputSynapse(this);
    //risk = riskFactor;
    memory = new Vector<Double>();
    /*
    if (A.inConn) {
      B.inConn = true;
    }
    else if (B.outConn) { //might be useless
      A.outConn = true; //may have order-related logic errors
    }
    */
  }
  public void fire(InputKey x) { //IMPLEMENT RISK (in a non retarded way)
    //time = in.time+1;
    //System.out.println(time);
    //memory.add(x.value);
    double output = x.value*weight;
    InputKey key = new InputKey(x.time+delay,output);
    /*
    double sum = 0;
    for (int i = 0; i<memory.size()-1; i++) {
      sum = sum+Math.abs(memory.get(i)-memory.get(i+1)); //no weight factor bleh
    }
    sum = sum/memory.size(); //lmao
    double output = x*risk; //arbitrary af
    */
    out.read(key,outNum);
  }
  /*
  public void reweigh (double x) {
    /*
    if (Math.random()<0.001) {
      System.out.println(linearWeight);
      System.out.println(x);
    }
    memory.add(x);
    for (int i = 0; i<memory.size(); i++) {
      weight = weight+memory.get(i)*i; //linear function biased to recent events
    }
    //linearWeight+=x;
    weight = mapSignal(weight);
  }
  */
  public void reweigh (double x) {
    //if (Math.random()<0.001) {
      //System.out.println(x);
    //}
    double delta;
    if (x<=0) {//equals needed
      delta = ampPos*Math.exp(x/timeFactor);
    }
    else {
      delta = -ampNeg*Math.exp(-x/timeFactor);
    }
    memory.add(delta);
    //weight = 0;
    //delay = 0;
    for (int i = 0; i<memory.size(); i++) {
      weight+=memory.get(i)*Math.pow(1/2,memory.size()-i-1)/(Math.pow(2,memory.size()));
      //weight+=memory.get(i);
      delay-=scalingFactor*memory.get(i)*Math.pow(1/2,memory.size()-i-1)/(Math.pow(2,memory.size()));
      //delay-=memory.get(i)*scalingFactor;
    }
    if (delay<0)
      delay=0;
    //if (Math.random()<0.001) {
      //System.out.println(delay);
    //}
  }
  public double mapSignal (double x) { //sigmoid function for now //not necessary rn
    return x/(Math.sqrt(1+x*x));
  }
}